generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String    @unique
    password String    @unique
    role     UserRole  @default(USER)
    verified DateTime?

    provider   String?
    providerId String?

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name        String
    description String
    price       Int
    image       String[]

    brand   Brand? @relation(fields: [brandId], references: [id])
    brandId Int

    season   Season? @relation(fields: [seasonId], references: [id])
    seasonId Int

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    cartItems CartItem[]
    size      Size[]
    type      Type[]

    color Color[]
    sale  Boolean? @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Brand {
    id Int @id @default(autoincrement())

    name    String    @unique
    product Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Season {
    id Int @id @default(autoincrement())

    name    String    @unique
    product Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Color {
    id Int @id @default(autoincrement())

    name    String    @unique
    type    String
    product Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())

    name String @unique

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Type {
    id Int @id @default(autoincrement())

    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Size {
    id Int @id @default(autoincrement())

    name     Int       @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem   Product @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int @default(1)

    size Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
